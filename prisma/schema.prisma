// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id                String  @id @default(uuid()) @db.Uuid // use pg's dedicated uuid type
    username          String  @unique @db.VarChar(200)
    password          String  @db.VarChar(45) // hashLength = 32, digestLength = 43
    avatar            String?
    identityPublicKey String

    sentMessages     Message[] @relation("sender")
    recievedMessages Message[] @relation("recipient")

    // Prisma sets this as optional, but it is a required 1-1 relation
    signedPreKey   SignedPreKey?
    oneTimePreKeys OneTimePreKey[]

    // Note name and email will NOT be used, but they are fields generally required by next-auth
    // Will be required for any sort of server-side session management
    // name          String?
    // email         String?   @unique
    // emailVerified DateTime?
    // createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt

    // accounts         Account[]
    // sessions         Session[]

    @@map("users")
}

model SignedPreKey {
    keyId     Int
    publicKey String
    signature String
    userId    String @unique @db.Uuid // unique enforces 1-1 constraint

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
    @@map("signed_pre_keys")
}

model OneTimePreKey {
    keyId     Int
    publicKey String
    userId    String @db.Uuid

    user User @relation(fields: [userId], references: [id])

    @@unique([keyId, userId])
    @@index([userId])
    @@map("one_time_pre_keys")
}

model Message {
    id          Int         @id @default(autoincrement())
    senderId    String      @db.Uuid
    recipientId String      @db.Uuid
    timestamp   DateTime    @default(now())
    content     String // include convo_id  
    contentType ContentType

    whisperType Int // should be an enum, look into it later
    // seenAt         DateTime? 
    // conversationId String // won't need this if everything stored client side

    sender    User @relation(name: "sender", fields: [senderId], references: [id])
    recipient User @relation(name: "recipient", fields: [recipientId], references: [id])

    @@index([recipientId])
    @@map("messages")
}

enum ContentType {
    TEXT
    IMAGE
    VIDEO
    AUDIO
    FILE
}

// Generally necessary for next-auth, will add if 3rd party providers/sessions/OAuth is necessary
// Also necessary for session management server-side
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
//     @@map("accounts")
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@map("sessions")
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
//     @@map("verification_tokens")
// }
